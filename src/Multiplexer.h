//=============================================================================
//
// file :        Multiplexer.h
//
// description : Include for the Multiplexer class.
//
// project :	NI-Switch Support
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.2  2007/09/03 11:01:51  rsune
// Added support for terminated modes
// Added a mutex to the static members
// TODO: Now only one multiplexer (with up to two tango devices) can be used with one server
//
// Revision 1.1.1.1  2007/08/31 14:15:24  rsune
// Minor changes over original Soleil device
//
// Revision 1.2  2005/07/05 12:29:21  leclercq
// Fixed dtor problem
//
// Revision 1.1.1.1  2004/11/08 14:14:19  root
// initial import
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _MULTIPLEXER_H
#define _MULTIPLEXER_H

#include <tango.h>
//using namespace Tango;

/**
 * @author	$Author$
 * @version	$Revision$ $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------
class Mux; 

namespace Multiplexer_ns
{

/**
 * Class Description:
 * Provides support for the NI-2593 [dual 8x1 or single 16x1 multiplexer]
 */

/*
 *	Device States Description:
*  Tango::FAULT :    Hardware failure [unable to control the hardware]
*  Tango::RUNNING :  Device is up and ready
 */


class Multiplexer: public Tango::Device_3Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	Name of signals attached to mux. inputs.
 *	Syntax <channel-id>:<signal_name>. For instance: 0:camera_1
 */
	vector<string>	signals;
/**
 *	The name of NI-DAQmx device [use NI-MAX device name]
 */
	string	niDAQmxDeviceName;
/**
 *	The multiplexer topology: "8x1", "16x1", "4x1 terminated", "8x1 terminated"
 */
	string	topology;
/**
 *	In case Topology is set to 8x1, this property indentifies the 8x1 multiplexer managed by this device.
 *	Should be 0 [channels[0..7]->com0] or 1 [channels[8..15]->com1].
 */
	Tango::DevShort	muxId;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Multiplexer(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Multiplexer(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	Multiplexer(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	virtual ~Multiplexer() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name Multiplexer methods prototypes
 */

//@{
/**
 *	Execution allowed for SelectByName command.
 */
	virtual bool is_SelectByName_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SelectByChannel command.
 */
	virtual bool is_SelectByChannel_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetSignalsMapping command.
 */
	virtual bool is_GetSignalsMapping_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetSelectionByName command.
 */
	virtual bool is_GetSelectionByName_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetSelectionByChannel command.
 */
	virtual bool is_GetSelectionByChannel_allowed(const CORBA::Any &any);
/**
 * Connect the specified signal to the mux output
 *	@param	argin	The name of the signal to select
 *	@exception DevFailed
 */
	void	select_by_name(Tango::DevString);
/**
 * Connect the specified channel to the mux. output
 *	@param	argin	The channel to select
 *	@exception DevFailed
 */
	void	select_by_channel(Tango::DevUShort);
/**
 * The long array contains channel ids while the string array contains signal names
 *	@return	The signals mapping
 *	@exception DevFailed
 */
	Tango::DevVarLongStringArray	*get_signals_mapping();
/**
 * Returns the currently selected signal
 *	@return	The currently selected signal
 *	@exception DevFailed
 */
	Tango::DevString	get_selection_by_name();
/**
 * Returns the currently selected channel
 *	@return	The currently selected channel
 *	@exception DevFailed
 */
	Tango::DevShort	get_selection_by_channel();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------

  //- the actual multiplexer
  Mux * mux_;
  
  //- are required device-properties specified?
  bool critical_properties_missing_;
};

}	// namespace

#endif	// _MULTIPLEXER_H
