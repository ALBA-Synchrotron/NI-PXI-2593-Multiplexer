static const char *RcsId = "$Header$";
//+=============================================================================
//
// file :         MultiplexerStateMachine.cpp
//
// description :  C++ source for the Multiplexer and its alowed. 
//                method for commands and attributes
//
// project :      TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.1  2007/09/06 15:18:51  rsune
// *** empty log message ***
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <tango.h>
#include <Multiplexer.h>
#include <MultiplexerClass.h>

/*====================================================================
 *	This file contains the methods to allow commands and attributes
 * read or write execution.
 *
 * If you wand to add your own code, add it between 
 * the "End/Re-Start of Generated Code" comments.
 *
 * If you want, you can also add your own methods.
 *====================================================================
 */

namespace Multiplexer_ns
{

//=================================================
//		Attributes Allowed Methods
//=================================================


//=================================================
//		Commands Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		Multiplexer::is_SelectByName_allowed
// 
// description : 	Execution allowed for SelectByName command.
//
//-----------------------------------------------------------------------------
bool Multiplexer::is_SelectByName_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Multiplexer::is_SelectByChannel_allowed
// 
// description : 	Execution allowed for SelectByChannel command.
//
//-----------------------------------------------------------------------------
bool Multiplexer::is_SelectByChannel_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Multiplexer::is_GetSignalsMapping_allowed
// 
// description : 	Execution allowed for GetSignalsMapping command.
//
//-----------------------------------------------------------------------------
bool Multiplexer::is_GetSignalsMapping_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Multiplexer::is_GetSelectionByName_allowed
// 
// description : 	Execution allowed for GetSelectionByName command.
//
//-----------------------------------------------------------------------------
bool Multiplexer::is_GetSelectionByName_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Multiplexer::is_GetSelectionByChannel_allowed
// 
// description : 	Execution allowed for GetSelectionByChannel command.
//
//-----------------------------------------------------------------------------
bool Multiplexer::is_GetSelectionByChannel_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}

}	// namespace Multiplexer_ns
