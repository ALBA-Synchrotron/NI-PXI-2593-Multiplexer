//=============================================================================
//
// file :         MultiplexerClass.h
//
// description :  Include for the MultiplexerClass root class.
//                This class is represents the singleton class for
//                the Multiplexer device class.
//                It contains all properties and methods which the 
//                Multiplexer requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.1  2007/08/31 14:15:24  rsune
// Initial revision
//
// Revision 1.1.1.1  2004/11/08 14:14:19  root
// initial import
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _MULTIPLEXERCLASS_H
#define _MULTIPLEXERCLASS_H

#include <tango.h>


namespace Multiplexer_ns
{
//
// Define classes for commands
//
class GetSelectionByChannelCmd : public Tango::Command
{
public:
	GetSelectionByChannelCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	GetSelectionByChannelCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~GetSelectionByChannelCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class GetSelectionByNameCmd : public Tango::Command
{
public:
	GetSelectionByNameCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	GetSelectionByNameCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~GetSelectionByNameCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class GetSignalsMappingCmd : public Tango::Command
{
public:
	GetSignalsMappingCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	GetSignalsMappingCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~GetSignalsMappingCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class SelectByChannelCmd : public Tango::Command
{
public:
	SelectByChannelCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	SelectByChannelCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~SelectByChannelCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};


class SelectByNameCmd : public Tango::Command
{
public:
	SelectByNameCmd(const char *,Tango::CmdArgType, Tango::CmdArgType,const char *,const char *, Tango::DispLevel);
	SelectByNameCmd(const char *,Tango::CmdArgType, Tango::CmdArgType);
	~SelectByNameCmd() {};
	
	virtual bool is_allowed (Tango::DeviceImpl *, const CORBA::Any &);
	virtual CORBA::Any *execute (Tango::DeviceImpl *, const CORBA::Any &);
};



//
// The MultiplexerClass singleton definition
//

class MultiplexerClass : public Tango::DeviceClass
{
public:

//	add your own data members here
//------------------------------------

public:

//	Method prototypes
	static MultiplexerClass *init(const char *);
	static MultiplexerClass *instance();
	~MultiplexerClass();
	
protected:
	MultiplexerClass(string &);
	static MultiplexerClass *_instance;
	void command_factory();
	void write_class_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace Multiplexer

#endif // _MULTIPLEXERCLASS_H
